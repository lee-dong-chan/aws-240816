name: Deployment
#deploy 전체는 작성해올것

on:
  push:
    branches:
      - main

jobs:
  back-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: wait for mySQL to be ready
        run: |
          until mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Wating for mySQL"
            sleep 5
          done

      - name: Install mySQL Client
        run: sudo apt-get install mysql-client

      # - name: Run mySQL commands
      #   run: |
      #     mysql --h "127.0.0.1" -u ${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -e "SHOW DATABASES"

      - name: set env
        working-directory: ./mock-test
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MESSAGE=${{ secrets.MESSAGE }}" >> .env

      - name: Install dependencies of backend
        working-directory: ./mock-test
        run: npm i

      - name: Run Test of backend
        working-directory: ./mock-test
        run: npm test

  front-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies of bfrontend
        working-directory: ./todo_list
        run: npm i

      - name: Run Test of backend
        working-directory: ./todo_list
        run: npm test

  test_node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/ .ssh
          chmod 700 ~/ .ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name:
          test node
          # run: ssh ${{ secrets.EC2_USER}}@${{ secrets.EC2_HOST}} 'source ~/.bashrc && nvm -v'  ##---> 이전에 설치한것을 읽지 못함
        run: |
          ssh ${{ secrets.EC2_USER}}@${{ secrets.EC2_HOST}} '
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          else
            echo "nvm.sh not found"
            exit 1
          fi

          nvm -v
          nvm use --lts
          node -v
          npm -v'

  test_mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/ .ssh
          chmod 700 ~/ .ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mysql
        run: |
          ssh ${{ secrets.EC2_USER}}@${{ secrets.EC2_HOST}} '
          sudo service mysql status'

      - name: test mysql user
        run: |
          ssh ${{ secrets.EC2_USER}}@${{ secrets.EC2_HOST}} '
          mysql -u ${{ secrets.MYSQL_USER}} -p${{ secrets.MYSQL_PASSWORD }} -e "SHOW DATABASES;"'

  deploy_backend:
    needs:
      - back-test
      - front-test
      - test_node
      - test_mysql
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Back
        working-directory: ./mock-test
        run: npm i

      - name: set env
        working-directory: ./mock-test
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MESSAGE=${{ secrets.MESSAGE }}" >> .env

      - name: Build Back
        working-directory: ./mock-test
        run: |
          npx tsc
          ls -al

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/backend
            mkdir /var/www/backend'
          rsync -avz -e "ssh" ./mock-test/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend
          rsync -avz -e "ssh" ./mock-test/package.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/package.json
          rsync -avz -e "ssh" ./mock-test/.env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/.env

      - name: Install and Configure Node.js and PM2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi
            nvm use --lts
            cd /var/www/backend
            npm i --production'

      - name: Start Server
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi
            nvm use --lts
            npm install -g pm2
            pm2 stop all
            pm2 start /var/www/backend/index.js --name backend
          '

  deploy_front:
    runs-on: ubuntu-latest
    needs: front-test
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Front
        working-directory: ./todo_list
        run: npm i

      - name: Build Front
        working-directory: ./todo_list
        run: npm run build

      - name: delete map
        working-directory: ./todo_list/build/
        run: |
          rm -rf ./**/*/*.map

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/html
            mkdir /var/www/html'
          rsync -avz -e "ssh" ./todo_list/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'
